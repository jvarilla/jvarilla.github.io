/** Created By Josfeph Varilla on 6/18/2019 */

package demo

// can use any library from java in kotlin
import java.util.Random
fun main(args: Array<String>) {
    println("Hello World")

    // immutable constant
    val name = "Derek"

    // mutable variable
    var myAge = 42

    // Kotlin uses type inference
    var myTemp = 98F

    // Define type
    var bigInt: Int = Int.MAX_VALUE
    var smallInt: Int = Int.MIN_VALUE

    println("Biggest Int : " + bigInt)

    // String Interpolation  (like template strings
    println("Smallest Int : $smallInt")

    var dblNum1: Double = 1.11111111111111
    var dblNum2: Double = 1.11111111111111
    println("Sum : " + (dblNum1 - dblNum2))

    println("Sum : ${dblNum1 - dblNum2}")

    var letterGrade: Char = 'A'

    // Check type with is
    println("A is a Char : ${letterGrade is Char}")

    // Casting values (use toDataType
    println("3.14 to Int:" + (3.14.toInt()))
    println("A to Int : " + ('A'.toInt()))
    println("65 to Char :" + 65.toChar())

    // Strings

    val myName = "Derek Banas"

    // Three double quotes allows you to do multiline strings
    val longStr = """This is a
        long string"""

    var fName: String = "Doug"
    var lName: String = "Smith"

    fName  = "Sally"

    var fullName = fName + " " + lName
    println("Name : $fullName")

    // Get Length
    println("String length : ${longStr.length}")

    var str1 = "A random string"
    var str2 = "a random string"

    println("String Equals: ${str1.equals(str2)}")
    println("Compare A to B ${str1.compareTo(str2)}")

    // Char at sepecific index
    println("2nd Index: ${str1.get(2)}")
    // or
    println("2nd Index: ${str1[2]}")

    // Get Substring from 2-7 (stops before upper bound
    println("Index 2-7: ${str1.subSequence(2,8)}" )

    // Contains
    println("Contains random:  ${str1.contains("random")}")


    // Arrays
    var myArray = arrayOf(1, 1.23, "Doug")
    println(myArray[2])
    myArray[1] = 3.14
    // Array has size not length
    println("Array length: ${myArray.size}")
    println("Doug in Array: ${myArray.contains("Doug")}")

    // Get subset of array
    var partArray = myArray.copyOfRange(0,1)

    // First element
    println("First: ${myArray.first()}")

    // Find index
    println("Doug Index: ${myArray.indexOf("Doug")}")

    // Array Collections
    // Use lambda function per element
    var squareArray = Array(5, { x -> x * x})
    println(squareArray[2])

    // Setting a specific type for an array
    // Putting in something else that isn't an Int will fail
    var arr2: Array<Int> = arrayOf(1,2,3)


    // Ranges Define Start and End Value
    val oneTo10 = 1..10 // 1,2,3,4,5,6,7,8,9,10
    System.out.println("onTo10")
    val alpha = "A".."Z"

    println("$oneTo10")
    // Search a range
    println("R in Alpha: ${"R" in alpha}" )

    // Descending range
    val tenTo1= 10.downTo(1)

    val rng3 = oneTo10.step(3)
    println(rng3)

    for (x in rng3) println("rng3 : $x")
    for( x in tenTo1.reversed()) println("Reverse: $x")

    // Conditions
    // > < >= <= == !=
    // && || !
    val age = 8
    if (age < 5) {
        println("Go to PReschool")
    } else if (age == 5) {
        println("Go to kindergarten")
    } else if ((age > 5) && (age <= 17)) {
        val grade = age -5
        println("Go to Ggrade $grade")
    } else {
        println("Go to college")
    }

    // When in place of switch in the language
    when(age) {
        0,1,2,3,4 -> println("Go to preschool")

        5 -> println("Go to Kindergarten")

        in 6..17 -> {
            val grade = age -5
            println("Go to Grade $grade")
        }

        else -> println("Go to college")
    }

    // Loops

    // for in loop
    for(x in 1..10) {
        println("Loop : $x")
    }


    val random = Random()
    val magicNum = random.nextInt(50) + 1

    var guess = 0

        while (magicNum != guess) {
            guess += 1
        }

        println("Magic Number was $guess")

    for(x in 1..20) {
        if(x % 2 == 0) {// if even
            continue
        }
        println("Odd : $x")
        if (x == 15) break // jump out of lop at 15
    }

    var arr5: Array<Int> = arrayOf(3,6,9)
    for (i in arr5.indices) {
        println("Multiples of 3: ${arr5[i]}")
    }

    // Get index and value
    for ((index, value) in arr5.withIndex()) {
        println("Index: $index Value : $value")
    }


    // Functions
    // fun funName(param1: type, param2: type) : ReturnType
    fun add(num1: Int, num2: Int) : Int = num1 + num2
    println("5 + 4 =  ${add(5,4)}" )

    fun subtract(num1: Int, num2: Int) = num1 - num2
    println("5 - 4 = ${subtract(5,4)}")

    // Named parameters refer to params even out of order
    println("4 -5 = ${subtract(num2 = 5, num1 = 4)}")

    // Unit in place of void
    fun sayHello(name: String) : Unit = println("Hello $name")

    sayHello("Paul")

    // Like object deconstruction
    val (two, three) = nextTwo(1)
    println("1 $two $three")

    val multiply = {num1: Int, num2: Int -> num1 * num2}
    println("5 * 3 = ${multiply(5,3)}")

    println("1 + 2 + 3 = ${getSum(1,2,3)}")

}

// Return two things
fun nextTwo(num: Int) : Pair<Int, Int> {
    return Pair(num+1, num+2)
}

// Variable num of parameters use vararg
fun getSum(vararg nums: Int) : Int {
    var sum = 0

    nums.forEach { n -> sum += n }

    return sum
}

// Higher Order Functions -> currying
